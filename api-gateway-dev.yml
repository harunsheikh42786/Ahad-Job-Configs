@Component
public class JwtAuthenticationFilter implements GlobalFilter {
    
    @Autowired
    private JwtUtil jwtUtil;
    
    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        String path = exchange.getRequest().getURI().getPath();
        String method = exchange.getRequest().getMethod().toString();
        
        // 1. PUBLIC ROUTES - No JWT check
        if (isPublicRoute(path, method)) {
            return chain.filter(exchange);
        }
        
        // 2. PROTECTED ROUTES - JWT check required
        String authHeader = exchange.getRequest().getHeaders().getFirst("Authorization");
        
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            return unauthorizedResponse(exchange, "Missing or invalid Authorization header");
        }
        
        String token = authHeader.substring(7);
        
        if (!jwtUtil.validateToken(token)) {
            return unauthorizedResponse(exchange, "Invalid or expired token");
        }
        
        // Add user info to headers for downstream services
        ServerHttpRequest mutatedRequest = addUserHeaders(exchange, token);
        
        return chain.filter(exchange.mutate().request(mutatedRequest).build());
    }
    
    private boolean isPublicRoute(String path, String method) {
        // Auth routes - always public
        if (path.startsWith("/api/v1/auth/") || 
            path.startsWith("/authenticate") ||
            path.startsWith("/api/v1/register/")) {
            return true;
        }
        
        // Public job routes - GET methods only
        if (path.startsWith("/api/v1/jobs/") && "GET".equals(method)) {
            return true;
        }
        
        // Public categories
        if (path.startsWith("/api/v1/categories/") && "GET".equals(method)) {
            return true;
        }
        
        return false;
    }
    
    private ServerHttpRequest addUserHeaders(ServerWebExchange exchange, String token) {
        String accountType = jwtUtil.extractAccountType(token);
        
        ServerHttpRequest.Builder requestBuilder = exchange.getRequest().mutate()
            .header("X-Account-Type", accountType);
            
        if ("USER".equals(accountType)) {
            String userId = jwtUtil.extractUserId(token);
            requestBuilder.header("X-User-Id", userId);
        } else if ("COMPANY".equals(accountType)) {
            String companyId = jwtUtil.extractCompanyId(token);
            requestBuilder.header("X-Company-Id", companyId);
        }
        
        return requestBuilder.build();
    }
    
    private Mono<Void> unauthorizedResponse(ServerWebExchange exchange, String message) {
        exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
        exchange.getResponse().getHeaders().add("Content-Type", "application/json");
        
        String responseBody = "{\"error\": \"Unauthorized\", \"message\": \"" + message + "\"}";
        
        DataBuffer buffer = exchange.getResponse().bufferFactory()
            .wrap(responseBody.getBytes(StandardCharsets.UTF_8));
            
        return exchange.getResponse().writeWith(Mono.just(buffer));
    }
}
